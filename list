#!/usr/bin/env python3
# directory lister

import os, sys, pwd, grp, datetime

SKLADNIA='list <ścieżka> [-w (rozmiar|wlasciciel|prawa) -s(r) (nazwa|rozmiar|wlasciciel)]'

def Blad(przyczyna, sciezka=''):
	bledy={'opcje': 'Błędne opcje polecenia. Składnia to:\n'+SKLADNIA,
			'token': 'Nierozpoznana opcja. Dozwolone opcje to -w, -s, --wyswietl lub --sortuj',
			'nie_katalog': '%s nie jest katalogiem' % sciezka,
			'no_such_directory': 'Nie ma takiego katalogu: %s' % sciezka,
			'no_entry': 'Brak dostępu do %s' % sciezka,
			'unknown': 'Nieznany błąd. %s' % sciezka,
			}
	print(bledy[przyczyna])
	sys.exit(-1)

def ParsujOpcje (opcje):
	"""Parsuje łańcuch <opcje>. zwraca wskaźniki SORTUJ i WYSWIETL w postaci list
	składnia:
	-w <r>ozmiar - nazwa + rozmiar pliku
	-w <p>rawa - nazwa + drwxrwxrwx
	-w <d>ata - nazwa + data modyfikacji
	-w <w>łaściciel - nazwa + właściciel:grupa
	parametry mogą być łączone (np. -w rdw)

	-s <r>ozmiar - sortuje po rozmiarze
	-s <d>ata - po dacie modyfikacji
	-s <w>łaściciel - po właścicielu
	sortowanie po uprawnieniach jest chyba bez sensu, nie?
	
	litera 'r' po opcji -s powoduje sortowanie od tyłu (reversed)
	"""
	if len(opcje)==0:	#lista opcji jest pusta, więc zwracamy wartości domyślne
		return ['nazwa', ], ['nazwa', ]
	# lista opcji nie jest pusta, więc trzeba się nią zająć
	
	tokeny=('-w', '--wyswietl', '-s', '--sortuj', '-sr', '--sortuj_odwr')
	komendy=[]	# lista list zawierająca poszczególne komendy i ich argumenty, np: [['-w', 'rozmiar'], ['-s', 'data', 'rozmiar']]
	wyswietl=['nazwa']	# nazwę wyświetlamy zawsze - domyślnie
	sortuj=['nazwa'] 
	
	if opcje[0] not in tokeny:
		Blad('token')
	
	i=-1
	for e in opcje:
		if e in tokeny:	# trafiliśmy na komendę	
			i+=1		# zwiększamy indeks listy komendy
			komendy.append([]) # i dodajemy pustą listę
		komendy[i].append(e)	# dopisujemy kolejne elementy komendy
	
	for komenda in komendy:
		if len(komenda)<2:
			Blad('opcje')
		if komenda[0]=='-w' or komenda[0]=='--wyswietl':
			for e in komenda[1:]:
				if e in ['rozmiar', 'wlasciciel', 'prawa', 'data']:
					wyswietl.append(e)
				elif len(komenda[1])<5:	#krótkie opcje
					if 'r' in komenda[1]:
						wyswietl.append('rozmiar')
					if 'w' in komenda[1]:
						wyswietl.append('wlasciciel')
					if 'p' in komenda[1]:
						wyswietl.append('prawa')
					if 'd' in komenda[1]:
						wyswietl.append('data')
				else:
					Blad('opcje')
		if komenda[0]=='-s' or komenda[0]=='--sortuj':
			for e in komenda[1:]:
				if e=='rozmiar' or e=='wlasciciel' or e=='data':
					sortuj.append(e)
				elif len(komenda[1])<5:	#krótkie opcje
					if 'r' in komenda[1]:
						sortuj.append('rozmiar')
					if 'w' in komenda[1]:
						sortuj.append('wlasciciel')
					if 'd' in komenda[1]:
						sortuj.append('data')
				else:
					Blad('opcje')		
		if komenda[0]=='-sr' or komenda[0]=='--sortuj-odwr':
			for e in komenda[1:]:
				if e in ['rozmiar','wlasciciel', 'data', 'nazwa']:
					sortuj.append('r_'+e)
				elif len(komenda[1])<5:	#krótkie opcje
					if 'r' in komenda[1]:
						sortuj.append('r_rozmiar')
					if 'w' in komenda[1]:
						sortuj.append('r_wlasciciel')
					if 'd' in komenda[1]:
						sortuj.append('r_data')
					if 'n' in komenda[1]:
						sortuj.append('r_nazwa')
				else:
					Blad('opcje')
			
	return wyswietl, sortuj
	
def PobierzArgumenty():
	"""Pobiera argumenty z linii poleceń - zwraca ścieżkę i listę opcji
	"""
	if len(sys.argv)<2:
		sciezka=os.getcwd()	# jeśli ścieżka nie jest podana, to listujemy zawartość homedir
	else:
		sciezka=sys.argv[1]
		if sciezka=='-h' or sciezka=='--help':
			print("""Wyświetlanie zawartości katalogów:

Składnia: list <ścieżka> [opcje]
<ścieżka> - ścieżka dostępu do katalogu
opcje: -w, --wyswietl - wyświetla dodatkowe informacje o pliku lub katalogu. Przyjmuje parametry: r|w|p|d albo rozmiar|wlasciciel|prawa|data 
-s, --sortuj - sortuje wyświetlane katalogi i pliki według rozmiaru, właściciela lub daty modyfikacji. Przyjmuje parametry takie, jak opcja -w, --wyswietl
-sr, --sortuj_odwr - sortuje w porządku malejącym
-h, --help - wyświetla ten tekst...

Przykłady:

list / -w rw - wyświetla zawartość katalogu głównego pokazując rozmiar i właściciela:grupę
list /home -s d - wyświetla zawartość folderu /home posortowaną według daty modyfikacji
list /temp/ --wyswietl prawa wlasciciel - wyświetla folder /temp pokazując uprawnienia każdego pliku i jego właściciela:grupę.
""")
			sys.exit(0)
	
	opcje=[]
	for e in sys.argv[2:]:
		opcje.append(e)
	
	return sciezka, opcje

def ZbierzInfo(sciezka):
	"""Zbiera informacje o katalogu <sciezka>.
	Zwraca listę słowników <katalogi> i <pliki>
	"""
	def OkreslWlasciciela(uid, gid):
		"""Na podstawie uid i gid zwraca nazwę właściciela i grupę
		w formacie str
		"""
		try:
			owner = pwd.getpwuid(uid).pw_name
		except KeyError:
			owner = '<nieznany> uid=' + str(uid)
		try:
			group = grp.getgrgid(gid).gr_name
		except KeyError:
			group = '<nieznana> gid=' + str(gid)
		return ':'.join((owner, group))
	def ParsujUprawnienia(rights):
		"""zwraca uprawnienia podane przez int<rights> w postaci str typu: rwx rw- rw-"""
		rights=bin(rights)[-9:]
		pattern='rwxrwxrwx'
		u=''
		for i in range(len(rights)):
			u+=rights[i]=='1' and pattern[i] or '-'
		return u
	def ParsujDate(czas):
		ti=datetime.datetime.fromtimestamp(czas)
		return str(ti.date())+' %02d:%02d:%02d' % (ti.hour, ti.minute, ti.second)
		
		
	try:
		if os.path.isfile(sciezka):
			Blad('nie_katalog', sciezka)
		gen=os.scandir(sciezka)
	except IOError as blad:
		if 'Errno 2' in str(blad):
			Blad('no_such_directory', sciezka)
		elif 'Errno 13' in str(blad):
			Blad('no_entry', sciezka)
		else:
			Blad('unknown', blad)
		sys.exit(-1)
	
	katalogi=[]
	pliki=[]

	# poszczególne informacje o pliku/katalogu (nazwa, rozmiar, właściciel itp.) będą zapisywane jako elementy słownika
	for elem in gen:
		try:
			czy_katalog=elem.is_dir()
			nazwa=elem.name
			rozmiar=elem.stat().st_size
			wlasciciel=OkreslWlasciciela(elem.stat().st_uid, elem.stat().st_gid)
			prawa=ParsujUprawnienia(elem.stat().st_mode)
			data=ParsujDate(elem.stat().st_mtime)
		except IOError as blad:
			if 'Errno 13' in str(blad):
				nazwa=elem.name + "!"
		if czy_katalog:
			katalogi.append({'nazwa':nazwa,
							 'rozmiar':rozmiar,
							 'wlasciciel':wlasciciel,
							 'prawa':prawa,
							 'data':data,
							})
		else:
			pliki.append({'nazwa':nazwa,
						  'rozmiar':rozmiar,
						  'wlasciciel':wlasciciel,
						  'prawa':prawa,
						  'data':data,
						 })
	
	return katalogi, pliki

def Sortuj (katalogi, pliki, wzorzec):
	"""sortuje listy <katalogi> i <pliki> zgodnie z parametrem str <wzorzec>
	zwraca dwie listy
	"""
	def byKey(klucz):
		def selector(d):
			return d[klucz]
		return selector
	
	for wz in wzorzec:
		rev=False
		if wz.startswith('r_'):
			rev=True
			wz=wz[2:]
		katalogi.sort(key=byKey(wz), reverse=rev)
		pliki.sort(key=byKey(wz), reverse=rev)
	
	return katalogi, pliki

def Wyswietl (katalog, katalogi, pliki, wyswietl, sortuj):
	"""Wyświetla zawartość list <katalogi> i <pliki> zgodnie z zawartością <wyswietl>
	"""
	def Rozmiar(bajty):
		"""Zwraca sformatowany rozmiar jako łańcuch
		Dla bajty<1024 zwraca <bajty>
		Dla bajty>1024 zwraca KB
		potem MB, GB itd.
		"""
		if bajty<1024:
			return '%s B' % str(bajty)
		elif bajty<1024*1024:
			return '%s KB' % str(bajty//1024)
		elif bajty<1024*1024*1024:
			return '%s MB' % str(bajty//(1024*1024))
		else:
			return '%s GB' % str(bajty//(1024*1024*1024))
			
	print ("Zawartość katalogu %s" % katalog)

	if len(katalogi)==0 and len(pliki)==0:
		print ("<PUSTY>")
	else:
		katalogi, pliki = Sortuj(katalogi, pliki, sortuj)
		for e in katalogi:
			print ("<DIR> ", end='')
			for p in wyswietl:
				if p=='nazwa':
					print(e[p].ljust(23), end=' ')
				elif p=='rozmiar':
					print(Rozmiar(e[p]).rjust(8), end=' ')
				elif p=='wlasciciel':
					print(e[p].ljust(15), end=' ')
				elif p=='prawa' or p=='data':
					print('   '+e[p], end=' ')
			print()
		for e in pliki:
			for p in wyswietl:
				if p=='nazwa':
					print(e[p].ljust(29), end=' ')
				elif p=='rozmiar':
					print(Rozmiar(e[p]).rjust(8), end=' ')
				elif p=='wlasciciel':
					print(e[p].ljust(15), end=' ')
				elif p=='prawa' or p=='data':
					print('   '+e[p], end=' ')
			print()	
	print ("Zawiera katalogów: %s i plików: %s" % (len(katalogi), len(pliki)))



katalog, opcje = PobierzArgumenty()
wyswietl, sortuj = ParsujOpcje(opcje)
katalogi, pliki = ZbierzInfo (katalog)
Wyswietl (katalog, katalogi, pliki, wyswietl, sortuj)


